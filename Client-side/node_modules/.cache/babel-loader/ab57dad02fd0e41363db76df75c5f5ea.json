{"ast":null,"code":"const CallToServer = (Server_url, requestType, requestRoute, requestData) => {\n  return new Promise(async function (resolve, reject) {\n    if (requestType == \"GET\") {\n      fetch(`${Server_url}${requestRoute}`).then(res => res.json()).then(response => {\n        resolve(response);\n      });\n    } else if (requestType == \"POST\") {\n      const response = await fetch(`${Server_url}${requestRoute}`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify(requestData)\n      });\n      resolve(response);\n    }\n  }).catch(error => {//reject(error);\n  });\n};\n\n_c = CallToServer;\nexport { CallToServer };\n\nvar _c;\n\n$RefreshReg$(_c, \"CallToServer\");","map":{"version":3,"names":["CallToServer","Server_url","requestType","requestRoute","requestData","Promise","resolve","reject","fetch","then","res","json","response","method","mode","headers","Accept","body","JSON","stringify","catch","error"],"sources":["/home/tuba/8Semester-Data/EnterpriseApp/Final-Practice/Client-side/src/Components/backendApiCalls.js"],"sourcesContent":["const CallToServer = (Server_url,requestType, requestRoute, requestData) => {\n    return new Promise(async function (resolve, reject) {\n      if (requestType == \"GET\") {\n        fetch(`${Server_url}${requestRoute}`)\n          .then((res) => res.json())\n          .then((response) => {\n            resolve(response);\n          });\n      } else if (requestType == \"POST\") {\n       \n          const response = await fetch(`${Server_url}${requestRoute}`, {\n              method: 'POST', \n              mode: 'cors',\n              headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n          \n              },\n              body: JSON.stringify(requestData) \n            });\n            resolve(response)     \n      }\n    }).catch((error)=>{\n        //reject(error);\n    });\n   \n  };\n  \n  export { CallToServer};\n  "],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,UAAD,EAAYC,WAAZ,EAAyBC,YAAzB,EAAuCC,WAAvC,KAAuD;EACxE,OAAO,IAAIC,OAAJ,CAAY,gBAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;IAClD,IAAIL,WAAW,IAAI,KAAnB,EAA0B;MACxBM,KAAK,CAAE,GAAEP,UAAW,GAAEE,YAAa,EAA9B,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,QAAD,IAAc;QAClBN,OAAO,CAACM,QAAD,CAAP;MACD,CAJH;IAKD,CAND,MAMO,IAAIV,WAAW,IAAI,MAAnB,EAA2B;MAE9B,MAAMU,QAAQ,GAAG,MAAMJ,KAAK,CAAE,GAAEP,UAAW,GAAEE,YAAa,EAA9B,EAAiC;QACzDU,MAAM,EAAE,MADiD;QAEzDC,IAAI,EAAE,MAFmD;QAGzDC,OAAO,EAAE;UACP,gBAAgB,kBADT;UAEPC,MAAM,EAAE;QAFD,CAHgD;QAQzDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,WAAf;MARmD,CAAjC,CAA5B;MAUEE,OAAO,CAACM,QAAD,CAAP;IACL;EACF,CArBM,EAqBJQ,KArBI,CAqBGC,KAAD,IAAS,CACd;EACH,CAvBM,CAAP;AAyBD,CA1BH;;KAAMrB,Y;AA4BJ,SAASA,YAAT"},"metadata":{},"sourceType":"module"}